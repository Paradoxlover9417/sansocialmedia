name: nas_aws_deploy

on:
  pull_request:
    types: [opened, synchronize, closed]
    branches: [dev, main]

jobs:
  test:
    if: github.event.action == 'opened' || github.event.action == 'synchronize'
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: 그래이들 퍼미션 부여
        run: chmod +x ./gradlew

      - name: application.yml 생성
        run: echo "${{ secrets.SPRING_ENV }}" > ./src/main/resources/application.yml

      - name: test application.yml 생성
        run: |
          mkdir -p ./src/test/resources
          echo "${{ secrets.SPRING_TEST_ENV }}" > ./src/test/resources/application.yml

      - name: Verify application.yml exists
        run: cat ./src/main/resources/application.yml

      - name: Build with Gradle
        run: ./gradlew clean build

  set-environment:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
    steps:
      - name: Set Environment
        id: set-env
        run: |
          echo ${{ github.ref }}
          echo "environment=dev" >> $GITHUB_OUTPUT
        
          if [[ ${{ github.ref }} == *"main"* ]]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
          fi

      - name: check environment
        run: echo ${{ steps.set-env.outputs.environment }}

  image-build:
    runs-on: ubuntu-latest
    needs: [set-environment]
    strategy:
      matrix:
        environment: ["${{ needs.set-environment.outputs.environment }}"]
    environment: ${{ matrix.environment }}
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: 그래이들 퍼미션 부여
        run: chmod +x ./gradlew

      - name: application.yml 생성
        run: echo "${{ secrets.SPRING_ENV }}" > ./src/main/resources/application.yml

      - name: test application.yml 생성
        run: |
          mkdir -p ./src/test/resources
          echo "${{ secrets.SPRING_TEST_ENV }}" > ./src/test/resources/application.yml

      - name: Verify application.yml exists
        run: cat ./src/main/resources/application.yml

      - name: Build with Gradle
        run: ./gradlew clean build

      - name: Set Docker Image Tag and Platform
        run: |
          if [ "${{ matrix.environment }}" = "prod" ]; then
            echo "DOCKER_TAG=paradoxlover9417/sansocialmedia-prod:latest" >> $GITHUB_ENV
            echo "DOCKER_PLATFORM=linux/amd64/v3" >> $GITHUB_ENV
          else
            echo "DOCKER_TAG=paradoxlover9417/sansocialmedia-dev:latest" >> $GITHUB_ENV
            echo "DOCKER_PLATFORM=linux/arm64/v8" >> $GITHUB_ENV
          fi

      - name: Build Docker Image
        run: |
          docker build --platform ${{ env.DOCKER_PLATFORM }} -t ${{ env.DOCKER_TAG }} .
          echo "DOCKER_IMAGE=${{ env.DOCKER_TAG }}" >> $GITHUB_ENV

      - name: Sign in to DockerHub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Push Docker Image
        run: docker push ${{ env.DOCKER_IMAGE }}

  deploy:
    runs-on: ubuntu-latest
    needs: [set-environment, image-build]
    strategy:
      matrix:
        environment: ["${{ needs.set-environment.outputs.environment }}"]
    environment: ${{ matrix.environment }}
    steps:
      - name: Deploy to NAS
        if: ${{ matrix.environment == 'dev' }}
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.NAS_HOST }}
          username: ${{ secrets.NAS_USERNAME }}
          password: ${{ secrets.NAS_PASSWORD }}
          port: ${{ secrets.NAS_PORT }}
          script: |
            export PATH=$PATH:/usr/local/bin
            export PW=${{ secrets.NAS_PASSWORD }}
            echo $PW | sudo -S docker pull paradoxlover9417/sansocialmedia-dev:latest
            echo $PW | sudo -S docker stop sansocialmedia-dev || true
            echo $PW | sudo -S docker rm sansocialmedia-dev || true
            echo $PW | sudo -S docker run -d -p 8080:8080 -e SPRING_PROFILES_ACTIVE=dev --name sansocialmedia-dev paradoxlover9417/sansocialmedia-dev:latest

      - name: Deploy to AWS
        if: ${{ matrix.environment == 'prod' }}
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.AWS_USERNAME }}
          key: ${{ secrets.AWS_PRIVATE_KEY }}
          script: |
            sudo docker pull paradoxlover9417/sansocialmedia-prod:latest
            sudo docker stop sansocialmedia-prod || true
            sudo docker rm sansocialmedia-prod || true
            sudo docker run -d -p 8080:8080 -e SPRING_PROFILES_ACTIVE=prod --name sansocialmedia-prod paradoxlover9417/sansocialmedia-prod:latest

  create-pull-request:
    if: needs.set-environment.outputs.environment == 'dev'
    permissions:
      id-token: write
      contents: write
    runs-on: ubuntu-latest
    needs: [set-environment, deploy]
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: gh auth login
        run: |
          echo "${{ secrets.PERSONAL_ACCESS_TOKEN }}" | gh auth login --with-token

      - name: Create Branch
        run: |
          git checkout -b release/${{ github.run_id }}
          git push origin release/${{ github.run_id }}

      - name: Create Pull Request
        run: |
          gh pr create --base main --head release/${{ github.run_id }} --title "release/${{ github.run_id }}" --body "release pull request to main"